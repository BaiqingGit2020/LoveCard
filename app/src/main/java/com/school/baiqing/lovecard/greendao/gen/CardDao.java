package com.school.baiqing.lovecard.greendao.gen;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.school.baiqing.lovecard.greendao.entity.Card;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "CARD".
*/
public class CardDao extends AbstractDao<Card, Long> {

    public static final String TABLENAME = "CARD";

    /**
     * Properties of entity Card.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Category = new Property(1, String.class, "Category", false, "CATEGORY");
        public final static Property From = new Property(2, String.class, "From", false, "FROM");
        public final static Property To = new Property(3, String.class, "To", false, "TO");
        public final static Property Content = new Property(4, String.class, "Content", false, "CONTENT");
        public final static Property Publish = new Property(5, java.util.Date.class, "Publish", false, "PUBLISH");
        public final static Property Finish = new Property(6, java.util.Date.class, "Finish", false, "FINISH");
        public final static Property IsFinish = new Property(7, Boolean.class, "isFinish", false, "IS_FINISH");
    }


    public CardDao(DaoConfig config) {
        super(config);
    }
    
    public CardDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"CARD\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"CATEGORY\" TEXT NOT NULL ," + // 1: Category
                "\"FROM\" TEXT," + // 2: From
                "\"TO\" TEXT," + // 3: To
                "\"CONTENT\" TEXT," + // 4: Content
                "\"PUBLISH\" INTEGER," + // 5: Publish
                "\"FINISH\" INTEGER," + // 6: Finish
                "\"IS_FINISH\" INTEGER);"); // 7: isFinish
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"CARD\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, Card entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindString(2, entity.getCategory());
 
        String From = entity.getFrom();
        if (From != null) {
            stmt.bindString(3, From);
        }
 
        String To = entity.getTo();
        if (To != null) {
            stmt.bindString(4, To);
        }
 
        String Content = entity.getContent();
        if (Content != null) {
            stmt.bindString(5, Content);
        }
 
        java.util.Date Publish = entity.getPublish();
        if (Publish != null) {
            stmt.bindLong(6, Publish.getTime());
        }
 
        java.util.Date Finish = entity.getFinish();
        if (Finish != null) {
            stmt.bindLong(7, Finish.getTime());
        }
 
        Boolean isFinish = entity.getIsFinish();
        if (isFinish != null) {
            stmt.bindLong(8, isFinish ? 1L: 0L);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, Card entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindString(2, entity.getCategory());
 
        String From = entity.getFrom();
        if (From != null) {
            stmt.bindString(3, From);
        }
 
        String To = entity.getTo();
        if (To != null) {
            stmt.bindString(4, To);
        }
 
        String Content = entity.getContent();
        if (Content != null) {
            stmt.bindString(5, Content);
        }
 
        java.util.Date Publish = entity.getPublish();
        if (Publish != null) {
            stmt.bindLong(6, Publish.getTime());
        }
 
        java.util.Date Finish = entity.getFinish();
        if (Finish != null) {
            stmt.bindLong(7, Finish.getTime());
        }
 
        Boolean isFinish = entity.getIsFinish();
        if (isFinish != null) {
            stmt.bindLong(8, isFinish ? 1L: 0L);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public Card readEntity(Cursor cursor, int offset) {
        Card entity = new Card( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.getString(offset + 1), // Category
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // From
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // To
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // Content
            cursor.isNull(offset + 5) ? null : new java.util.Date(cursor.getLong(offset + 5)), // Publish
            cursor.isNull(offset + 6) ? null : new java.util.Date(cursor.getLong(offset + 6)), // Finish
            cursor.isNull(offset + 7) ? null : cursor.getShort(offset + 7) != 0 // isFinish
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, Card entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setCategory(cursor.getString(offset + 1));
        entity.setFrom(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setTo(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setContent(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setPublish(cursor.isNull(offset + 5) ? null : new java.util.Date(cursor.getLong(offset + 5)));
        entity.setFinish(cursor.isNull(offset + 6) ? null : new java.util.Date(cursor.getLong(offset + 6)));
        entity.setIsFinish(cursor.isNull(offset + 7) ? null : cursor.getShort(offset + 7) != 0);
     }
    
    @Override
    protected final Long updateKeyAfterInsert(Card entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(Card entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(Card entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
